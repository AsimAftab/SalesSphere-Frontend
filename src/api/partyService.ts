// --- TYPE DEFINITION ---
export interface Party {
Â  id: string;
Â  companyName: string;
Â  ownerName: string;
Â  address: string;
Â  latitude: number | null;
Â  longitude: number | null;
Â  dateCreated: string; // ISO date string
Â  phone: string;
Â  panVat: string;
Â  email: string;
Â  description?: string;
}

// --- ADD THIS INTERFACE --- ðŸ‘‡
export interface NewPartyData {
Â  Â  companyName: string; // Match the 'Party' interface field name
Â  Â  ownerName: string;
Â  Â  dateJoined: string; // Or dateCreated? If it's a field for the creation form
Â  Â  address: string;
Â  Â  latitude?: number | null; // Allow null
Â  Â  longitude?: number | null; // Allow null
Â  Â  email?: string;
Â  Â  phone?: string;
    panVat?: string; // Add if collected in the form
    description?: string;
}
// --- END OF ADDITION --- ðŸ‘†


// --- MOCK DATA ---
export const mockPartyData: Party[] = [
Â  Â  {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
{
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },

    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
    {
Â  Â  Â  id: 'new-traders',
Â  Â  Â  companyName: 'New Traders Pvt. Ltd.',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Thamel, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7172,
Â  Â  Â  longitude: 85.3240,
Â  Â  Â  dateCreated: '2023-03-15T08:30:00Z',
Â  Â  Â  phone: '9841234567',
Â  Â  Â  panVat: '123456789',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:''
Â  Â  },
    // ... (rest of mockPartyData remains the same) ...
    {
Â  Â  Â  id: 'patrick-padilla',
Â  Â  Â  companyName: 'Padilla Media Group',
Â  Â  Â  ownerName: 'Patrick Padilla',
Â  Â  Â  address: 'Bouddha, Kathmandu, Nepal',
Â  Â  Â  latitude: 27.7211,
Â  Â  Â  longitude: 85.3618,
Â  Â  Â  dateCreated: '2022-02-14T09:30:00Z',
Â  Â  Â  phone: '9811789012',
Â  Â  Â  panVat: '486753159',
Â  Â  Â  email: 'octavia.nienow@gleichner.net',
Â  Â  Â  description:'sdxsdsvjdxhdjvjdvjweispklpokvoisovkskvskvksovisokv;aslcv;sklcvkaslkv ls,cvslcvlkascvkcvls;lcla'
Â  Â  },
];

// --- MOCK API FETCH FUNCTION ---
export const getParties = async (): Promise<Party[]> => {
Â  // Simulate a network delay
Â  await new Promise(resolve => setTimeout(resolve, 500));

Â  // To test the error state, you can uncomment this line:
Â  // if (Math.random() > 0.8) throw new Error("Failed to fetch parties from the server.");

Â  return mockPartyData;
};

// --- ADD PARTY FUNCTION ---
// --- UPDATED to use NewPartyData --- ðŸ‘‡
export const addParty = async (partyData: NewPartyData): Promise<Party> => {
Â  // Simulate a network delay
Â  await new Promise(resolve => setTimeout(resolve, 500));

Â  // Create new party with generated ID and current date for dateCreated
Â  const newParty: Party = {
Â  Â  id: `party-${Date.now()}`,
Â  Â  companyName: partyData.companyName,
    ownerName: partyData.ownerName,
    address: partyData.address,
    latitude: partyData.latitude ?? null, // Default to null if undefined
    longitude: partyData.longitude ?? null, // Default to null if undefined
    dateCreated: new Date().toISOString(), // Generate creation date here
    phone: partyData.phone ?? '', // Default to empty string
    panVat: partyData.panVat ?? '', // Default to empty string
    email: partyData.email ?? '', // Default to empty string
    description: partyData.description ?? '',
Â  };

Â  // In a real application, this would make an API call to add the party to the database
Â  // For now, we'll just add it to our mock data
Â  mockPartyData.push(newParty);

Â  return newParty;
};

// --- DELETE PARTY FUNCTION ---
export const deleteParty = async (partyId: string): Promise<boolean> => {
Â  // Simulate a network delay
Â  await new Promise(resolve => setTimeout(resolve, 500));

Â  // Find the index of the party to delete
Â  const partyIndex = mockPartyData.findIndex(p => p.id === partyId);

Â  if (partyIndex === -1) {
Â  Â  throw new Error(`Party with ID ${partyId} not found`);
Â  }

Â  // In a real application, this would make an API call to delete the party from the database
Â  // For now, we'll just remove it from our mock data
Â  mockPartyData.splice(partyIndex, 1);

Â  return true;
};

// --- UPDATE PARTY FUNCTION ---
export const updateParty = async (partyId: string, updatedData: Partial<Party>): Promise<Party> => {
Â  // Simulate a network delay
Â  await new Promise(resolve => setTimeout(resolve, 500));

Â  // Find the party to update
Â  const partyIndex = mockPartyData.findIndex(p => p.id === partyId);

Â  if (partyIndex === -1) {
Â  Â  throw new Error(`Party with ID ${partyId} not found`);
Â  }

Â  // Update the party in mock data
Â  mockPartyData[partyIndex] = {
Â  Â  ...mockPartyData[partyIndex],
Â  Â  ...updatedData,
Â  };

Â  return mockPartyData[partyIndex];
};

// --- BULK UPLOAD RESULT INTERFACE ---
export interface BulkUploadResult {
Â  success: number;
Â  failed: number;
Â  errors: string[];
}

// --- BULK UPLOAD PARTIES FUNCTION ---
export const bulkUploadParties = async (
Â  _organizationId: string,
Â  parties: Omit<Party, 'id' | 'dateCreated'>[] // This correctly expects data without id/dateCreated
): Promise<BulkUploadResult> => {
Â  // Simulate a network delay
Â  await new Promise(resolve => setTimeout(resolve, 1500));

Â  const result: BulkUploadResult = {
Â  Â  success: 0,
Â  Â  failed: 0,
Â  Â  errors: []
Â  };

Â  // Validate and add each party
Â  for (let i = 0; i < parties.length; i++) {
Â  Â  const partyData = parties[i];

Â  Â  try {
Â  Â  Â  // Validate required fields
Â  Â  Â  if (!partyData.companyName || !partyData.ownerName || !partyData.address) {
Â  Â  Â  Â  result.failed++;
Â  Â  Â  Â  result.errors.push(`Row ${i + 2}: Missing required fields (Company Name, Owner Name, or Address)`);
Â  Â  Â  Â  continue;
Â  Â  Â  }

Â  Â  Â  // Validate email format
Â  Â  Â  if (!partyData.email || !partyData.email.includes('@')) {
Â  Â  Â  Â  result.failed++;
Â  Â  Â  Â  result.errors.push(`Row ${i + 2}: Email is required and must be valid`);
Â  Â  Â  Â  continue;
Â  Â  Â  }

Â  Â  Â  // Validate phone number (must be 10 digits)
Â  Â  Â  if (!partyData.phone || !/^\d{10}$/.test(partyData.phone)) {
Â  Â  Â  Â  result.failed++;
Â  Â  Â  Â  result.errors.push(`Row ${i + 2}: Phone number is required and must be 10 digits`);
Â  Â  Â  Â  continue;
Â  Â  Â  }

Â  Â  Â  // Create new party with generated ID and current date
Â  Â  Â  const randomSuffix = Array.from(crypto.getRandomValues(new Uint8Array(9)))
Â  Â  Â  Â  .map(b => b.toString(36))
Â  Â  Â  Â  .join('')
Â  Â  Â  Â  .substr(0, 9);
Â  Â  Â  const newParty: Party = {
Â  Â  Â  Â  id: `party-${Date.now()}-${randomSuffix}`,
Â  Â  Â  Â  companyName: partyData.companyName,
Â  Â  Â  Â  ownerName: partyData.ownerName,
Â  Â  Â  Â  address: partyData.address,
Â  Â  Â  Â  phone: partyData.phone || '',
Â  Â  Â  Â  panVat: partyData.panVat || '',
Â  Â  Â  Â  email: partyData.email || '',
Â  Â  Â  Â  latitude: partyData.latitude,
Â  Â  Â  Â  longitude: partyData.longitude,
Â  Â  Â  Â  dateCreated: new Date().toISOString(),
Â  Â  Â  Â  description: partyData.description ?? '',
Â  Â  Â  };

Â  Â  Â  // Add to mock data
Â  Â  Â  mockPartyData.push(newParty);
Â  Â  Â  result.success++;

Â  Â  } catch (error) {
Â  Â  Â  result.failed++;
Â  Â  Â  result.errors.push(`Row ${i + 2}: ${error instanceof Error ? error.message : 'Unknown error'}`);
Â  Â  }
Â  }

Â  return result;
};

// --- Note: Removed NewProspectData definition from here as it likely belongs in prospectService.ts ---